// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package transport

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *PID) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PID[number], err)
}

func (x *PID) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Address, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PID) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PID) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.RequestId, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *Meta) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Meta[number], err)
}

func (x *Meta) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Uuid, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Transport) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Transport[number], err)
}

func (x *Transport) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v PID
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Addr = &v
	return offset, nil
}

func (x *Transport) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Session, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Transport) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Meta
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Meta = &v
	return offset, nil
}

func (x *Transport) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Cmd, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Transport) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Msg, offset, err = fastpb.ReadBytes(buf, _type)
	return offset, err
}

func (x *PID) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PID) fastWriteField1(buf []byte) (offset int) {
	if x.Address == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetAddress())
	return offset
}

func (x *PID) fastWriteField2(buf []byte) (offset int) {
	if x.Id == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetId())
	return offset
}

func (x *PID) fastWriteField3(buf []byte) (offset int) {
	if x.RequestId == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 3, x.GetRequestId())
	return offset
}

func (x *Meta) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *Meta) fastWriteField1(buf []byte) (offset int) {
	if x.Uuid == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUuid())
	return offset
}

func (x *Transport) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *Transport) fastWriteField1(buf []byte) (offset int) {
	if x.Addr == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAddr())
	return offset
}

func (x *Transport) fastWriteField2(buf []byte) (offset int) {
	if x.Session == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSession())
	return offset
}

func (x *Transport) fastWriteField3(buf []byte) (offset int) {
	if x.Meta == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetMeta())
	return offset
}

func (x *Transport) fastWriteField4(buf []byte) (offset int) {
	if x.Cmd == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetCmd())
	return offset
}

func (x *Transport) fastWriteField5(buf []byte) (offset int) {
	if len(x.Msg) == 0 {
		return offset
	}
	offset += fastpb.WriteBytes(buf[offset:], 5, x.GetMsg())
	return offset
}

func (x *PID) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PID) sizeField1() (n int) {
	if x.Address == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetAddress())
	return n
}

func (x *PID) sizeField2() (n int) {
	if x.Id == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetId())
	return n
}

func (x *PID) sizeField3() (n int) {
	if x.RequestId == 0 {
		return n
	}
	n += fastpb.SizeUint32(3, x.GetRequestId())
	return n
}

func (x *Meta) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *Meta) sizeField1() (n int) {
	if x.Uuid == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUuid())
	return n
}

func (x *Transport) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *Transport) sizeField1() (n int) {
	if x.Addr == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetAddr())
	return n
}

func (x *Transport) sizeField2() (n int) {
	if x.Session == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSession())
	return n
}

func (x *Transport) sizeField3() (n int) {
	if x.Meta == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetMeta())
	return n
}

func (x *Transport) sizeField4() (n int) {
	if x.Cmd == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetCmd())
	return n
}

func (x *Transport) sizeField5() (n int) {
	if len(x.Msg) == 0 {
		return n
	}
	n += fastpb.SizeBytes(5, x.GetMsg())
	return n
}

var fieldIDToName_PID = map[int32]string{
	1: "Address",
	2: "Id",
	3: "RequestId",
}

var fieldIDToName_Meta = map[int32]string{
	1: "Uuid",
}

var fieldIDToName_Transport = map[int32]string{
	1: "Addr",
	2: "Session",
	3: "Meta",
	4: "Cmd",
	5: "Msg",
}
